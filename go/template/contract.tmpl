// SPDX-License-Identifier: MIT
pragma solidity >=0.4.24;

contract ServiceRegistry {
  event next(bytes from, bytes to, bytes activity);

  string public version;
  constructor(string memory _version) public {  
    version = _version;
{{- range $.Init }}
    init{{ . }}(false);    //协作起点置为false
{{- end }}
  }

{{ range $.Procs}}   
  bool isEnter{{.FunctionName}} = false;
  bool isExit{{.FunctionName}} = false;
{{- if .IsCatchEvent}}
  bool isEnabled{{.FunctionName}} = false;
{{- end }}
  function init{{.FunctionName}}(bool fromSend) private {
{{- if .IsCatchEvent }}
      if (fromSend) {
          emit next("", "", "{{.FunctionName}}");
          isEnabled{{.FunctionName}} = true;
      } else {
          isEnter{{.FunctionName}} = true;
      }
{{- else }}
      isEnter{{.FunctionName}} = true;
{{- end}}
{{- if not .IsEvent }}
{{- range .Init}}
      init{{.}}(fromSend);
{{- end }}
{{- end}}
  }
{{- if not .IsEvent }}
  function end{{.FunctionName}}() private {
      isExit{{.FunctionName}} = true;
{{- if .End.Exist }}
      isExit{{.End.Name}} = true;
      end{{.End.Name}}();
{{- end }}
{{- if .Next.Exist }}
      init{{.Next.Name}}(false);
{{- end }}
  }
{{- end }}
{{- if .IsEvent }}
  function {{.FunctionName}}() {{ if .IsCatchEvent }}public{{ else }}external{{ end }} {
    {{/* if (isEnter{{.FunctionName}}{{ if .IsCatchEvent }}&&isEnabled{{.FunctionName}}{{ end }}) { */}}
    {{- if .IsCatchEvent }}
    if (isEnabled{{.FunctionName}}) {
    {{- else -}}
    if (isEnter{{.FunctionName}}) {
    {{- end }}
{{- if .Next.Exist }}
      init{{.Next.Name}}(false);
{{- end }}

{{- range .Enable }}
      init{{.}}(true);
      {{.}}();
{{- end }}

{{- if .End.Exist }}
      end{{.End.Name}}();
{{- end }}
    }
  }
{{- end }}
{{end -}}
}