// SPDX-License-Identifier: MIT
pragma solidity >=0.4.24;

contract ServiceRegistry {
  event next(bytes from, bytes to, bytes activity);

  string public version;
  //variable definition
{{ range $.Procs2}}  
  bool isActive{{.FunctionName}} = false; 
{{- if .IsCatchEvent}}
  bool isEnabled{{.FunctionName}} = false;
{{- end }}
{{ end }}

  constructor(string memory _version) public {  
    version = _version;
{{- range $.Init }}
    isActive{{ . }} = true;    //协作起点置为true
{{- end }}
  }

{{ range $.Procs2}}
  function {{.FunctionName}}() {{ if .IsCatchEvent }}public{{ else }}external{{ end }} {
    {{- if .IsCatchEvent }}
    if (isEnabled{{.FunctionName}} && isActive{{.FunctionName}}) {
        emit next("", "", "{{.FunctionName}}");
	    {{- if .Next.Exist }}
	      {{- range .Next.Name}}
	          isActive{{.}} = true;
	      {{- end }}
	    {{- end }}
    }
    {{- else}}
      if (isActive{{.FunctionName}}) {
        emit next("", "", "{{.FunctionName}}");
        {{- range .Enable}}
          isEnabled{{.}} = true;
          {{.}}();
        {{- end }}
        {{- if .Next.Exist }}
	      {{- range .Next.Name}}
	          isActive{{.}} = true;
	      {{- end }}
	    {{- end }}
      }
    {{- end }}
    
  }
{{ end }}
}